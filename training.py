from physics import isLandingFinished, Rocket, Vector
import tools


#  Входная функция для вызова через ноутбук
def start_nb(savePath='.\\', actorCheckPointFile='actor.pth.tar', criticCheckPointFile='critic.pth.tar'):
    rf = tools.Reinforcement()
    rocket = Rocket()
    # Загрузка сохранённой НС или сосздание новой

    # Загрузка сохранённых параметров НС

    startEpoch = 0
    stopEpochNumber = 2
    # Главный цикл (перебор эпох / перебор игр)
    for epoch in range(startEpoch, stopEpochNumber):
        # генерация начального состояния игры (состояния ступени)
        rocket.ganerateState()

        # Цикл последовательных переходов из одного состояния ОС в друго
        # один проход - один переход
        while isLandingFinished() == False:
            pass
            # получить предыщущее (начальное) состояние

            # вывод картинки предыдущего (начального) состояния

            # проход через актора с получением действий актора

            # проход через критика с использованием ВСЕХ возможных действий в данном состоянии ОС
            # с получением ВСЕХ возможных значений функции ценности

            # выбор максимального значения функции ценности

            # Целевое значение функции ценности
            targetQtp1 = 0
            if isLandingFinished():
                # На последнем переходе функция ценности стремится к единице (при успешная посадка)
                targetQtp1 = rf.getReinforcement()

            # обратный проход последовательно по критику, а затем по актору с использованием функции потерь
            # от максимального значения функции ценности


            # Каждые несколько проходов
            #     Сохранение состояния окружающей среды
            #     Сохранение состояния ступени
            #     Сохранение состояния процесса обучения
            #     Сохранение состяния нейросетей

# вызов при локальном обучении
start_nb()